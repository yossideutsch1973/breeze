name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Please run 'go fmt ./...'"
          gofmt -s -d .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Run golangci-lint
      run: golangci-lint run --timeout=5m

    - name: Run tests with coverage
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Generate coverage report
      run: go tool cover -func=coverage.out

    - name: Check coverage threshold
      run: |
        coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${coverage}%"
        if (( $(echo "$coverage < 20.0" | bc -l) )); then
          echo "Coverage ${coverage}% is below minimum threshold of 20%"
          exit 1
        fi

    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.out

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build CLI
      run: go build -v ./cmd/breeze

    - name: Test CLI build
      run: ./breeze --help || echo "CLI built successfully"

  cross-compile:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Create bin directory
      run: mkdir -p bin

    - name: Cross-compile for Linux
      run: |
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o bin/breeze-linux-amd64 ./cmd/breeze
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o bin/breeze-linux-arm64 ./cmd/breeze

    - name: Cross-compile for macOS
      run: |
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o bin/breeze-darwin-amd64 ./cmd/breeze
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o bin/breeze-darwin-arm64 ./cmd/breeze

    - name: Cross-compile for Windows
      run: |
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o bin/breeze-windows-amd64.exe ./cmd/breeze
        GOOS=windows GOARCH=386 go build -ldflags="-s -w" -o bin/breeze-windows-386.exe ./cmd/breeze

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: breeze-binaries
        path: bin/