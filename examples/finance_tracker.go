// Personal Finance Tracker - Generated by Collaborative AI Teams
// SW Engineering Team: Alex Rivera, Jordan Chen
// Testing Team: Sam Taylor, Riley Morgan

package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"time"

	"github.com/gorilla/mux"
	_ "github.com/mattn/go-sqlite3"
)

// Transaction represents a financial transaction
type Transaction struct {
	ID          int     `json:"id"`
	Description string  `json:"description"`
	Amount      float64 `json:"amount"`
	Date        string  `json:"date"`
	Category    string  `json:"category"`
}

var db *sql.DB

func initDB() {
	var err error
	db, err = sql.Open("sqlite3", "./finance.db")
	if err != nil {
		log.Fatal(err)
	}

	// Create tables
	_, err = db.Exec(`
		CREATE TABLE IF NOT EXISTS transactions (
			id INTEGER PRIMARY KEY AUTOINCREMENT,
			description TEXT,
			amount REAL,
			date TEXT,
			category TEXT
		)
	`)
	if err != nil {
		log.Fatal(err)
	}
}

func createTransaction(w http.ResponseWriter, r *http.Request) {
	var tx Transaction
	if err := json.NewDecoder(r.Body).Decode(&tx); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	result, err := db.Exec("INSERT INTO transactions (description, amount, date, category) VALUES (?, ?, ?, ?)",
		tx.Description, tx.Amount, tx.Date, tx.Category)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	id, _ := result.LastInsertId()
	tx.ID = int(id)

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(tx)
}

func getTransactions(w http.ResponseWriter, r *http.Request) {
	rows, err := db.Query("SELECT id, description, amount, date, category FROM transactions ORDER BY date DESC")
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	var transactions []Transaction
	for rows.Next() {
		var tx Transaction
		rows.Scan(&tx.ID, &tx.Description, &tx.Amount, &tx.Date, &tx.Category)
		transactions = append(transactions, tx)
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(transactions)
}

func getDashboard(w http.ResponseWriter, r *http.Request) {
	// Simple dashboard with total and category breakdown
	rows, err := db.Query(`
		SELECT category, SUM(amount) as total
		FROM transactions
		GROUP BY category
	`)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	var total float64
	categoryTotals := make(map[string]float64)

	for rows.Next() {
		var category string
		var catTotal float64
		rows.Scan(&category, &catTotal)
		categoryTotals[category] = catTotal
		total += catTotal
	}

	dashboard := map[string]interface{}{
		"total":     total,
		"categories": categoryTotals,
		"month":    time.Now().Format("2006-01"),
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(dashboard)
}

func main() {
	initDB()
	defer db.Close()

	r := mux.NewRouter()

	// API routes
	api := r.PathPrefix("/api").Subrouter()
	api.HandleFunc("/transactions", createTransaction).Methods("POST")
	api.HandleFunc("/transactions", getTransactions).Methods("GET")
	api.HandleFunc("/dashboard", getDashboard).Methods("GET")

	// Serve static files
	r.PathPrefix("/").Handler(http.FileServer(http.Dir("./static/")))

	fmt.Println("ðŸš€ Personal Finance Tracker running on :8080")
	fmt.Println("ðŸ“Š API Endpoints:")
	fmt.Println("  POST /api/transactions - Create transaction")
	fmt.Println("  GET  /api/transactions - List transactions")
	fmt.Println("  GET  /api/dashboard - Get dashboard data")
	fmt.Println("ðŸ’¡ Open http://localhost:8080 in your browser")

	log.Fatal(http.ListenAndServe(":8080", r))
}